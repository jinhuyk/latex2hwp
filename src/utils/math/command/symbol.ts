const symbolMap: Record<string, string> = {
  
  // Greek letters (LaTeX standard)
  alpha: 'alpha', beta: 'beta', gamma: 'gamma', delta: 'delta', epsilon: 'epsilon',
  zeta: 'zeta', eta: 'eta', theta: 'theta', iota: 'iota', kappa: 'kappa',
  lambda: 'lambda', mu: 'mu', nu: 'nu', xi: 'xi', omicron: 'omicron',
  pi: 'pi', rho: 'rho', sigma: 'sigma', tau: 'tau', upsilon: 'upsilon',
  phi: 'phi', chi: 'chi', psi: 'psi', omega: 'omega',
  // Uppercase Greek letters (LaTeX standard)
  Alpha: 'Alpha', Beta: 'Beta', Gamma: 'Gamma', Delta: 'Delta', Epsilon: 'Epsilon',
  Zeta: 'Zeta', Eta: 'Eta', Theta: 'Theta', Iota: 'Iota', Kappa: 'Kappa',
  Lambda: 'Lambda', Mu: 'Mu', Nu: 'Nu', Xi: 'Xi', Omicron: 'Omicron',
  Pi: 'Pi', Rho: 'Rho', Sigma: 'Sigma', Tau: 'Tau', Upsilon: 'Upsilon',
  Phi: 'Phi', Chi: 'Chi', Psi: 'Psi', Omega: 'Omega',

  // Additional Greek/math-related special symbols
  aleph: 'ALEPH',
  hbar: 'HBAR',
  jmath: 'JMATH',
  imath: 'IMATH',
  wp: 'WP',
  vartheta: 'vartheta',
  varupsilon: 'varupsilon',
  ohm: 'OHM',
  imag: 'IMAG',
  varpi: 'varpi',
  varphi: 'varphi',
  angstrom: 'ANGSTROM',
  varsigma: 'varsigma',
  varepsilon: 'varepsilon',

  // Set/union symbols
  
  prod: 'PROD',
  coprod: 'COPROD',
  cap: 'SMALLINTER',
  cup: 'CAP',
  sqcap: 'SQCAP',
  sqcup: 'SQCUP',
  oplus: 'OPLUS',
  ominus: 'OMINUS',
  otimes: 'OTIMES',
  oslash: 'OSLASH',
  odot: 'ODOT',
  vee: 'VEE',
  wedge: 'WEDGE',
  subset: 'SUBSET',
  subseteq: 'SUBSETEQ',
  supset: 'SUPSET',
  supseteq: 'SUPSETEQ',
  in: 'IN',
  notin: 'notin',
  owns: 'OWNS',
  leq: 'LEQ',
  geq: 'GEQ',
  sqsubset: 'SQSUBSET',
  sqsupset: 'SQSUPSET',
  sqsubseteq: 'SQSUBSETEQ',
  sqsupseteq: 'SQSUPSETEQ',
  ll: '<<',
  gg: '>>',
  lll: 'LLL',
  prec: 'PREC',
  succ: 'SUCC',
  uplus: 'UPLUS',

  // Logic and operation symbols
  pm: 'PLUSMINUS',
  mp: 'MINUSPLUS',
  times: 'times',
  div: 'DIVIDE',
  circ: 'CIRC',
  bullet: 'BULLET',
  ast: 'AST',
  star: 'STAR',
  bigcirc: 'BIGCIRC',
  emptyset: 'EMPTYSET',
  therefore: 'THEREFORE',
  because: 'BECAUSE',
  neq: 'neq',
  doteq: 'DOTEQ',
  sim: 'SIM',
  approx: 'APPROX',
  cong: 'CONG',
  equiv: 'EQUIV',
  simeq: 'SIMEQ',
  asymp: 'ASYMP',
  iso: 'ISO',
  diamond: 'DIAMOND',
  forall: 'FORALL',
  exists: 'EXIST',
  partial: 'PARTIAL',
  infty: 'inf',
  propto: 'PROPTO',
  dagger: 'DAGGER',
  ddagger: 'DDAGGER',
  lnot: 'LNOT',

  // Miscellaneous symbols (corrected)
  cdots: 'cdots',
  cdot: 'cdot',
  ddots: 'DDOTS',
  ddot: 'ddot',
  ldots: 'LDOTS',
  ldot: 'ldot',
  vdots: 'VDOTS',
  angle: 'ANGLE',
  measuredangle: 'MSANGLE',
  sphericalangle: 'SANGLE',
  rangle: 'RTANGLE',
  vdash: 'VDASH',
  bot: 'BOT',
  top: 'TOP',
  models: 'MODELS',
  ell: 'ELL',
  degree: 'DEG',
  fahrenheit: 'FAHRENHEIT',
  backslash: 'LSLANT',
  slash: 'RSLANT',
  percento: 'hund',
  percentoo: 'thou',
  triangle: 'TRIANGLE',
  triangledown: 'TRIANGLED',
  base: 'base',
  benzene: 'benzene',
  att: 'att',
  prime:'prime',
  well: 'well',

  // Arrow symbols
  leftarrow: 'larrow',
  rightarrow: 'rarrow',
  to: 'rarrow',
  uparrow: 'uparrow',
  downarrow: 'downarrow',
  Leftarrow: 'LARROW',
  Rightarrow: 'RARROW',
  Uparrow: 'UPARROW',
  Downarrow: 'DOWNARROW',
  updownarrow: 'udarrow',
  leftrightarrow: 'lrarrow',
  Leftrightarrow: 'LRARROW',
  nwarrow: 'nwarrow',
  swarrow: 'swarrow',
  searrow: 'searrow',
  nearrow: 'nearrow',
  hookleftarrow: 'hookleft',
  hookrightarrow: 'hookright',
  mapsto: 'mapsto',
  vert: 'vert',
  Vert: 'VERT',
};

export const symbolCommands = Object.keys(symbolMap);

export function cvtSymbol(node: any): string {
  return symbolMap[node.name] || `\\${node.name}`;
}